<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GaryHome</title>
  
  <subtitle>技术探索与生活随笔</subtitle>
  <link href="https://garybyd.github.io/atom.xml" rel="self"/>
  
  <link href="https://garybyd.github.io/"/>
  <updated>2025-05-18T03:44:11.011Z</updated>
  <id>https://garybyd.github.io/</id>
  
  <author>
    <name>Gary Byd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis读写一致问题</title>
    <link href="https://garybyd.github.io/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/"/>
    <id>https://garybyd.github.io/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</id>
    <published>2025-05-18T03:11:31.000Z</published>
    <updated>2025-05-18T03:44:11.011Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="redis读写一致问题">Redis读写一致问题</span></h1><p><strong>条件:</strong></p><p>数据库此时的数据为10,redis此时的数据也为10</p><p><strong>业务流程:</strong></p><p>操作数据库使得数据库的数据为20，删除redis里面的数据保证读写一致</p><h2><span id="先删缓存再操作数据库">先删缓存，再操作数据库</span></h2><p>出现读写不一致情况:</p><img src="/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/image-20250518111417673.png" class title="image-20250518111417673"><table><thead><tr><th>线程1(业务)</th><th>线程2(并发线程)</th></tr></thead><tbody><tr><td>删除缓存</td><td></td></tr><tr><td></td><td>查询缓存，没有命中，查询数据库(数据库查到为10，下一步将10写入redis)</td></tr><tr><td></td><td>将10写入缓存</td></tr><tr><td>更新数据库，将数据库中的数据改为20</td><td></td></tr></tbody></table><p>最终情况</p><table><thead><tr><th>redis里面的数据</th><th>数据库里面的数据</th></tr></thead><tbody><tr><td>10</td><td>20</td></tr></tbody></table><p>出现数据不一致情况</p><h2><span id="先操作数据库再删除缓存">先操作数据库，再删除缓存</span></h2><img src="/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/image-20250518111907366.png" class title="image-20250518111907366"><table><thead><tr><th>线程1(并发线程)</th><th>线程2(业务线程)</th></tr></thead><tbody><tr><td>查询缓存未命中，查询数据库(下一步:将缓存更新为10)</td><td></td></tr><tr><td></td><td>更新数据库 v=20</td></tr><tr><td></td><td>删除缓存</td></tr><tr><td>写入缓存数据10</td><td></td></tr></tbody></table><p>最终情况:</p><table><thead><tr><th>redis数据</th><th>数据库数据</th></tr></thead><tbody><tr><td>10</td><td>20</td></tr></tbody></table><h2><span id="两个方法选择原则">两个方法选择原则</span></h2><table><thead><tr><th>适用策略</th><th>典型场景</th><th>是否推荐使用延迟双删</th></tr></thead><tbody><tr><td>先删缓存 → 后更新数据库</td><td>高一致性业务（余额、库存）</td><td>✅ 一定要延迟双删！</td></tr><tr><td>先更新数据库 → 后删缓存</td><td>低一致性业务（资料、文章内容）</td><td>❌ 可以不用延迟双删</td></tr></tbody></table><h1><span id="解决方案双写一致性">解决方案:双写一致性</span></h1><p>读操作没啥问题按照老流程</p><img src="/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/image-20250518112326510.png" class title="image-20250518112326510"><h2><span id="延时双删">延时双删</span></h2><img src="/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/image-20250518112428502.png" class title="image-20250518112428502"><table><thead><tr><th>问题</th><th>答案</th></tr></thead><tbody><tr><td>先删缓存还是先改数据库？</td><td><strong>先删缓存！</strong> 避免并发写入旧值</td></tr><tr><td>为什么删两次？</td><td>防止“改库之后，又有人写了旧值到缓存”</td></tr><tr><td>为什么要延迟删？</td><td>给并发线程一个“写入脏缓存”的机会，然后再清理掉它</td></tr></tbody></table><p>缺点:</p><table><thead><tr><th>问题点</th><th>延迟双删解决得了么？</th><th>推荐改进方式</th></tr></thead><tbody><tr><td>并发窗口写入脏缓存</td><td>❌ 只能删最后一个</td><td>分布式锁 + 双删 / MQ</td></tr><tr><td>延迟时间难控制</td><td>❌ 不可预测</td><td>MQ 或 Canal 机制更精准</td></tr><tr><td>异步删除失败风险</td><td>❌ 会丢失删除</td><td>使用可靠任务队列 / Redis 持久化</td></tr><tr><td>操作复杂、代码维护困难</td><td>❌ 容易遗漏 key</td><td>封装中间件、使用 AOP统一处理</td></tr></tbody></table><h2><span id="给他加锁">给他加锁</span></h2><h3><span id="读写都加锁">读写都加锁</span></h3><img src="/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/image-20250518113305286.png" class title="image-20250518113305286"><p>如图，程序运行串行化，性能低</p><p><strong>引入共享锁和排他锁机制</strong></p><p><strong>共享锁</strong>：读锁readLock，加锁之后，其他线程可以共享读操作</p><p><strong>排他锁</strong>：独占锁writeLock也叫，加锁之后，阻塞其他线程读写操作</p><img src="/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/image-20250518113420970.png" class title="image-20250518113420970"><p>代码Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.redisson.api.RReadWriteLock;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.redisson.api.RLock;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RedissonClient redissonClient;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RedisService redisService;     <span class="hljs-comment">// 你封装的 Redis 工具类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserRepository userRepository; <span class="hljs-comment">// 你操作数据库的类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(RedissonClient redissonClient, RedisService redisService, UserRepository userRepository)</span> &#123;<br>        <span class="hljs-built_in">this</span>.redissonClient = redissonClient;<br>        <span class="hljs-built_in">this</span>.redisService = redisService;<br>        <span class="hljs-built_in">this</span>.userRepository = userRepository;<br>    &#125;<br><br>    <span class="hljs-comment">// 读操作：加“读锁”</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Long userId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:&quot;</span> + userId;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:user:&quot;</span> + userId;<br><br>        <span class="hljs-type">RReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> redissonClient.getReadWriteLock(lockKey);<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">readLock</span> <span class="hljs-operator">=</span> rwLock.readLock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            readLock.lock(<span class="hljs-number">5</span>, TimeUnit.SECONDS); <span class="hljs-comment">// 加读锁，防止同时写入</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> redisService.get(key);  <span class="hljs-comment">// 先查缓存</span><br>            <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> user;<br>            &#125;<br><br>            <span class="hljs-comment">// 缓存未命中 → 查数据库并回写缓存</span><br>            user = userRepository.findById(userId);<br>            <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>                redisService.set(key, user, <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> user;<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readLock.unlock(); <span class="hljs-comment">// 释放读锁</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 写操作：加“写锁”</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> user.getId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:&quot;</span> + userId;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:user:&quot;</span> + userId;<br><br>        <span class="hljs-type">RReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> redissonClient.getReadWriteLock(lockKey);<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">writeLock</span> <span class="hljs-operator">=</span> rwLock.writeLock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            writeLock.lock(<span class="hljs-number">10</span>, TimeUnit.SECONDS); <span class="hljs-comment">// 加写锁，防止并发读/写</span><br>            redisService.del(key);                <span class="hljs-comment">// 删除缓存（第一次）</span><br>            userRepository.save(user);            <span class="hljs-comment">// 更新数据库</span><br>            <span class="hljs-comment">// 第二次删除可延迟做（避免并发写入旧值）</span><br>            Thread.sleep(<span class="hljs-number">500</span>);                    <span class="hljs-comment">// 模拟延迟</span><br>            redisService.del(key);                <span class="hljs-comment">// 延迟删除（第二次）</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            writeLock.unlock(); <span class="hljs-comment">// 释放写锁</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.redisson.api.RReadWriteLock;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.redisson.api.RLock;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RedissonClient redissonClient;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RedisService redisService;     <span class="hljs-comment">// 你封装的 Redis 工具类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserRepository userRepository; <span class="hljs-comment">// 你操作数据库的类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(RedissonClient redissonClient, RedisService redisService, UserRepository userRepository)</span> &#123;<br>        <span class="hljs-built_in">this</span>.redissonClient = redissonClient;<br>        <span class="hljs-built_in">this</span>.redisService = redisService;<br>        <span class="hljs-built_in">this</span>.userRepository = userRepository;<br>    &#125;<br><br>    <span class="hljs-comment">// 读操作：加“读锁”</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Long userId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:&quot;</span> + userId;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:user:&quot;</span> + userId;<br><br>        <span class="hljs-type">RReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> redissonClient.getReadWriteLock(lockKey);<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">readLock</span> <span class="hljs-operator">=</span> rwLock.readLock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            readLock.lock(<span class="hljs-number">5</span>, TimeUnit.SECONDS); <span class="hljs-comment">// 加读锁，防止同时写入</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> redisService.get(key);  <span class="hljs-comment">// 先查缓存</span><br>            <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> user;<br>            &#125;<br><br>            <span class="hljs-comment">// 缓存未命中 → 查数据库并回写缓存</span><br>            user = userRepository.findById(userId);<br>            <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>                redisService.set(key, user, <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> user;<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            readLock.unlock(); <span class="hljs-comment">// 释放读锁</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 写操作：加“写锁”</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> user.getId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:&quot;</span> + userId;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:user:&quot;</span> + userId;<br><br>        <span class="hljs-type">RReadWriteLock</span> <span class="hljs-variable">rwLock</span> <span class="hljs-operator">=</span> redissonClient.getReadWriteLock(lockKey);<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">writeLock</span> <span class="hljs-operator">=</span> rwLock.writeLock();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            writeLock.lock(<span class="hljs-number">10</span>, TimeUnit.SECONDS); <span class="hljs-comment">// 加写锁，防止并发读/写</span><br>            redisService.del(key);                <span class="hljs-comment">// 删除缓存（第一次）</span><br>            userRepository.save(user);            <span class="hljs-comment">// 更新数据库</span><br>            <span class="hljs-comment">// 第二次删除可延迟做（避免并发写入旧值）</span><br>            Thread.sleep(<span class="hljs-number">500</span>);                    <span class="hljs-comment">// 模拟延迟</span><br>            redisService.del(key);                <span class="hljs-comment">// 延迟删除（第二次）</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            writeLock.unlock(); <span class="hljs-comment">// 释放写锁</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><span id="中间件解决方案">中间件解决方案</span></h2><p>异步通知保证数据的最终一致性</p><img src="/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/image-20250518113738817.png" class title="image-20250518113738817"><img src="/posts/redis%E8%AF%BB%E5%86%99%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/image-20250518113751772.png" class title="image-20250518113751772"><p>canal是基于mysql的主从同步来实现的</p><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但不包括数据查询（SELECT、SHOW）语句。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;redis读写一致问题&quot;&gt;Redis读写一致问题&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;条件:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库此时的数据为10,redis此时的数据也为10&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;业务流程:&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    <category term="redis的问题方案" scheme="https://garybyd.github.io/categories/redis%E7%9A%84%E9%97%AE%E9%A2%98%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="redis" scheme="https://garybyd.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用lua优化一人一单问题</title>
    <link href="https://garybyd.github.io/posts/%E4%BD%BF%E7%94%A8lua%E4%BC%98%E5%8C%96%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%E9%97%AE%E9%A2%98/"/>
    <id>https://garybyd.github.io/posts/%E4%BD%BF%E7%94%A8lua%E4%BC%98%E5%8C%96%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%E9%97%AE%E9%A2%98/</id>
    <published>2025-05-15T13:41:05.000Z</published>
    <updated>2025-05-15T14:11:45.374Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="集群环境下的并发问题">集群环境下的并发问题</span></h1><img src="/posts/%E4%BD%BF%E7%94%A8lua%E4%BC%98%E5%8C%96%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%E9%97%AE%E9%A2%98/image-20250515215934565.png" class title="image-20250515215934565"><h2><span id="分布式锁-原理"><strong>分布式锁-原理</strong></span></h2><p><strong>不去使用jvm内部的锁监视器，我们要在外部开一个锁监视器，让它监视所有的线程</strong></p><img src="/posts/%E4%BD%BF%E7%94%A8lua%E4%BC%98%E5%8C%96%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%E9%97%AE%E9%A2%98/image-20250515215945861.png" class title="image-20250515215945861"><h1><span id="lua解决">Lua解决！</span></h1><p>解决这个问题主要是让一个用户不能同时创建两个订单(在缓存创建前)</p><p>lua可以在保证原子性redis执行的原子性，所以咱可以用他解决一人一单引发的并发问题无需加锁</p><h2><span id="lua代码逻辑">lua代码逻辑</span></h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 参数列表</span><br><span class="hljs-comment">-- 优惠卷id</span><br><span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-comment">-- 用户id</span><br><span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]<br><br><span class="hljs-comment">-- 数据key</span><br><span class="hljs-comment">-- 库存key</span><br><span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&#x27;seckill:stock:&#x27;</span> .. voucherId<br><span class="hljs-comment">-- 订单key</span><br><span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&#x27;seckill:order:&#x27;</span> .. voucherId<br><span class="hljs-built_in">print</span>(stockKey)<br><span class="hljs-built_in">print</span>(orderKey)<br><span class="hljs-comment">-- 脚本业务</span><br><span class="hljs-comment">-- 检查库存是否充足</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 检查用户是否已下单</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 扣库存</span><br>redis.call(<span class="hljs-string">&#x27;incrby&#x27;</span>, stockKey, <span class="hljs-number">-1</span>)<br><span class="hljs-comment">-- 下单保存用户</span><br>redis.call(<span class="hljs-string">&#x27;sadd&#x27;</span>, orderKey, userId)<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h2><span id="java调用代码逻辑">java调用代码逻辑</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;<br><br> <span class="hljs-keyword">static</span> &#123;<br>     SECKILL_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>     SECKILL_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;seckill.lua&quot;</span>));<br>     SECKILL_SCRIPT.setResultType(Long.class);<br> &#125;<br> <span class="hljs-keyword">private</span> IVoucherOrderService proxy;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-meta">@Transactional</span><br> <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>     <span class="hljs-comment">//获取用户</span><br>     <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>     System.out.println(<span class="hljs-string">&quot;userId = &quot;</span> + userId);<br>     System.out.println(<span class="hljs-string">&quot;voucherId = &quot;</span> + voucherId);<br>     <span class="hljs-comment">//执行lua脚本</span><br>     <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(<br>             SECKILL_SCRIPT,<br>             Collections.emptyList(),<br>             voucherId.toString(),<br>             userId.toString()<br>             );<br>     <span class="hljs-comment">//判断结果是否为零</span><br>     <span class="hljs-keyword">assert</span> result != <span class="hljs-literal">null</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>     <span class="hljs-keyword">if</span>(r!=<span class="hljs-number">0</span>)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">switch</span> (r) &#123;<br>             <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>             <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; Result.fail(<span class="hljs-string">&quot;不能重复下单&quot;</span>);<br>             <span class="hljs-keyword">default</span> -&gt; Result.fail(<span class="hljs-string">&quot;系统错误&quot;</span>);<br>         &#125;;<br>     &#125;<br>     <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>     <span class="hljs-comment">// 保存阻塞队列</span><br>     <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>     <span class="hljs-comment">//订单id</span><br>     voucherOrder.setId(orderId);<br>     <span class="hljs-comment">//用户id</span><br>     voucherOrder.setUserId(userId);<br>     <span class="hljs-comment">//代金券id</span><br>     voucherOrder.setVoucherId(voucherId);<br>     <span class="hljs-comment">//加入阻塞队列</span><br>     orderTasks.add(voucherOrder);<br>     proxy = (IVoucherOrderService) AopContext.currentProxy();<br>     <span class="hljs-comment">//不为0</span><br><br>     <span class="hljs-comment">//为0 有购买资格 把下单信息保存到阻塞队列</span><br><br>     <span class="hljs-comment">//返回订单id</span><br>     <span class="hljs-keyword">return</span> Result.ok(orderId);<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;集群环境下的并发问题&quot;&gt;集群环境下的并发问题&lt;/span&gt;&lt;/h1&gt;
&lt;img src=&quot;/posts/%E4%BD%BF%E7%94%A8lua%E4%BC%98%E5%8C%96%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%9</summary>
      
    
    
    
    <category term="redis的应用" scheme="https://garybyd.github.io/categories/redis%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="redis" scheme="https://garybyd.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis解决常见的秒杀问题</title>
    <link href="https://garybyd.github.io/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/"/>
    <id>https://garybyd.github.io/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/</id>
    <published>2025-03-07T06:24:13.000Z</published>
    <updated>2025-03-07T08:05:06.302Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="秒杀问题">秒杀问题</span></h1><span id="more"></span><p>每个店铺都可以发布优惠券，保存到 tb_voucher 表中；当用户抢购时，生成订单并保存到 tb_voucher_order 表中。</p><p>订单表如果使用数据库自增 ID，会存在以下问题：</p><ul><li>ID 的规律太明显，容易暴露信息。</li><li>单表数据量的限制，订单过多时单表很难存储得下。数据量过大后需要拆库拆表，但拆分表了之后，各表从逻辑上是同一张表，所以 id 不能一样， 于是需要保证 ID 的唯一性。</li></ul><h2><span id="全局唯一id">全局唯一ID</span></h2><p>全局唯一 ID 的特点</p><ul><li>唯一性：Redis 独立于数据库之外，不论有多少个数据库、多少张表，访问 Redis 获取到的 ID 可以保证唯一。</li><li>高可用：Redis 高可用（集群等方案）。</li><li>高性能：Redis 速度很快。</li><li>递增性：例如 String 的 INCR 命令，可以保证递增。</li><li>安全性：为了增加 ID 的安全性，在使用 Redis 自增数值的基础上，在拼接一些其他信息。</li></ul><p>全局唯一 ID 的组成（存储数值类型占用空间更小，使用 long 存储，8 byte，64 bit）</p><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307142854673.png" class title="image-20250307142854673"><ul><li><p>符号位：1 bit，永远为 0，代表 ID 是正数。</p></li><li><p>时间戳：31 bit，以秒为单位，可以使用 69 年。</p></li><li><p>序列号：32 bit，当前时间戳对应的数量，也就是每秒可以对应 2^32 个不同的 ID。</p></li></ul><p><strong>Redis ID 自增策略</strong>：通过设置每天存入一个 Key，方便统计订单数量；ID 构造为 时间戳 + 计数器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisIdWorker</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定时间戳（2023年1月1日 0:0:00） LocalDateTime.of(2023, 1, 1, 0, 0, 0).toEpochSecond(ZoneOffset.UTC)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">BEGIN_TIMESTAMP_2023</span> <span class="hljs-operator">=</span> <span class="hljs-number">1672531200L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列号位数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BIT_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisIdWorker</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">(String keyPrefix)</span> &#123;<br>        <span class="hljs-comment">// 1. 时间戳</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> LocalDateTime.now().toEpochSecond(ZoneOffset.UTC) - BEGIN_TIMESTAMP_2023;<br>        <span class="hljs-comment">// 2. 生成序列号：自增 1，Key 不存在会自动创建一个 Key。（存储到 Redis 中的 Key 为 keyPrefix:date，Value 为自增的数量）</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">serialNumber</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().increment(keyPrefix + <span class="hljs-string">&quot;:&quot;</span> + DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>).format(LocalDate.now()));<br>        <span class="hljs-comment">// 3. 时间戳左移 32 位，序列号与右边的 32 个 0 进行与运算</span><br>        <span class="hljs-keyword">return</span> timestamp &lt;&lt; BIT_COUNT | serialNumber;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试(300个线程生成共3w个id)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">ES</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">500</span>);<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGloballyUniqueID</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 程序是异步的，分线程全部走完之后主线程再走，使用 CountDownLatch；否则异步程序没有执行完时主线程就已经执行完了</span><br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">300</span>);<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">globallyUniqueID</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;sun&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;globallyUniqueID = &quot;</span> + globallyUniqueID);<br>        &#125;<br>        latch.countDown();<br>    &#125;;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) &#123;<br>        ES.submit(task);<br>    &#125;<br>    latch.await();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;Execution Time: &quot;</span> + (end - begin));<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><span id="添加优惠卷">添加优惠卷</span></h2><p>格式类似这种逻辑太简单了略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;shopId&quot;</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;100元代金券&quot;</span>,<br>    <span class="hljs-string">&quot;subTitle&quot;</span>:<span class="hljs-string">&quot;周一至周五均可使用&quot;</span>,<br>    <span class="hljs-string">&quot;rules&quot;</span>:<span class="hljs-string">&quot;全场通用\n无需预约\n可无限叠加\n不兑现、不找零\n仅限堂食&quot;</span>,<br>    <span class="hljs-string">&quot;payValue&quot;</span>:<span class="hljs-number">8000</span>,<br>    <span class="hljs-string">&quot;actualValue&quot;</span>:<span class="hljs-number">10000</span>,<br>    <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;stock&quot;</span>:<span class="hljs-number">100</span>,<br>    <span class="hljs-string">&quot;beginTime&quot;</span>:<span class="hljs-string">&quot;2022-11-13T10:09:17&quot;</span>,<br>    <span class="hljs-string">&quot;endTime&quot;</span>:<span class="hljs-string">&quot;2022-11-13T22:10:17&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="秒杀下单功能">秒杀下单功能</span></h2><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307144455414.png" class title="image-20250307144455414"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">//1.查询优惠卷</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    <span class="hljs-comment">//2.判断秒杀是否开始，是否结束</span><br>    <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已结束!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3.判断库存是否充足</span><br>    <span class="hljs-keyword">if</span>(voucher.getStock()&lt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;优惠券库存不足!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.扣减库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>            .setSql(<span class="hljs-string">&quot;stock = stock -1&quot;</span>)<br>            .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).update();<br>    <span class="hljs-comment">//5.创建订单</span><br>    <span class="hljs-keyword">if</span>(!success)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;优惠券库存不足!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//6.返回订单id</span><br>    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>    <span class="hljs-comment">//6.1订单id</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>    voucherOrder.setId(orderId);<br>    <span class="hljs-comment">//6.2用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    voucherOrder.setUserId(userId);<br>    <span class="hljs-comment">//6.3代金券id</span><br>    voucherOrder.setVoucherId(voucherId);<br><br>    <span class="hljs-comment">//7.订单写入数据库</span><br>    save(voucherOrder);<br>    <br>    <span class="hljs-comment">//8.返回订单Id</span><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><h3><span id="超卖问题">超卖问题</span></h3><p><strong>假设库存为 1，有线程1、2、3，时刻 t1、t2、t3、t4。</strong></p><ul><li><strong>t1</strong>：线程1 查询库存，库存为 1；</li><li><strong>t2</strong>：线程2、线程 3 查询库存，库存为 1；</li><li><strong>t3</strong>：线程1 下单，库存扣减为 0。</li><li><strong>t4</strong>：线程2 和 线程3 下单，库存扣减为 -2。</li></ul><p>具体图示:</p><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307144908831.png" class title="image-20250307144908831"><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307145131525.png" class title="image-20250307145131525"><h2><span id="解决超卖问题">解决超卖问题</span></h2><h4><span id="悲观锁">悲观锁</span></h4><p>太简单了直接加锁保证操作数据是原子操作要串行执行</p><h4><span id="乐观锁">乐观锁</span></h4><h5><span id="版本号法">版本号法:</span></h5><p>一般是在数据库表中加上一个 version 字段表示 数据被修改的次数。数据被修改时 version 值加 1。</p><ol><li><p>线程 A 读取数据，同时读取到 version 值。</p></li><li><p>提交更新时，若刚才读到的 version 值未发生变化：则提交更新并且 version 值加 1。</p></li><li><p>提交更新时，若刚才读到的 version 值发生了变化：放弃更新，并通过报错、自旋重试等方式进行下一步处理。</p></li></ol><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307145426017.png" class title="image-20250307145426017"><h5><span id="cas法简单来说就是直接拿库存当版本号">CAS法(简单来说就是直接拿库存当版本号):</span></h5><p>CAS 操作需要输入两个数值，一个旧值（操作前的值）和一个新值，操作时先比较下在旧值有没有发生变化，若未发生变化才交换成新值，发生了变化则不交换。</p><p><strong>CAS 是原子操作，多线程并发使用 CAS 更新数据时，可以不使用锁。原子操作是最小的不可拆分的操作，操作一旦开始，不能被打断，直到操作完成。也就是多个线程对同一块内存的操作是串行的。</strong></p><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307145458923.png" class title="image-20250307145458923"><h2><span id="一人一单问题">一人一单问题</span></h2><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307150243527.png" class><p>一人一单逻辑:</p><ol><li>发送下单请求，提交优惠券 ID。</li><li>下单前需要判断：<strong>秒杀是否开始或结束、库存是否充足</strong>。</li><li>库存充足：<strong>根据优惠券 ID 和用户 ID 查询订单，判断该用户是否购买过该优惠券</strong>。</li><li><strong>该用户对该优惠券的订单不存在时</strong>，扣减库存、创建订单、返回订单 ID。</li></ol><h3><span id="解决并发安全问题">解决并发安全问题</span></h3><ol><li>单人下单（一个用户），高并发的情况下：该用户的 10 个线程同时执行到 查询该用户 ID 和秒杀券对应的订单数量，10 个线程查询到的值都为 0，即未下单。于是会出现一个用户下 10 单的情况。</li><li>**此处仍需加锁，乐观锁适合更新操作，插入操作需要选择悲观锁。**若直接在方法上添加 synchronized 关键字，会让锁的范围（粒度）过大，导致性能较差。因此，采用 一个用户一把锁 的方式。</li></ol><p><strong><code>问题：能否用乐观锁执行？</code></strong></p><p><strong><code>不能，原因是乐观锁只能操作(修改)单个变量，而创建订单需要操作数据库(难以跟踪状态)</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> CommonResult&lt;Long&gt; <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 判断秒杀是否开始或结束、库存是否充足。</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">seckillVoucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    ThrowUtils.throwIf(seckillVoucher == <span class="hljs-literal">null</span>, ErrorCode.NOT_FOUND_ERROR);<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    ThrowUtils.throwIf(now.isBefore(seckillVoucher.getBeginTime()), ErrorCode.OPERATION_ERROR, <span class="hljs-string">&quot;秒杀尚未开始&quot;</span>);<br>    ThrowUtils.throwIf(now.isAfter(seckillVoucher.getEndTime()), ErrorCode.OPERATION_ERROR, <span class="hljs-string">&quot;秒杀已经结束&quot;</span>);<br>    ThrowUtils.throwIf(seckillVoucher.getStock() &lt; <span class="hljs-number">1</span>, ErrorCode.OPERATION_ERROR, <span class="hljs-string">&quot;库存不足&quot;</span>);<br><br>    <span class="hljs-comment">// 下单</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.createVoucherOrder(voucherId);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 下单（超卖 - CAS、一人一单 - synchronized）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> CommonResult&lt;Long&gt; <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 1. 判断当前用户是否下过单</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lambdaQuery()<br>            .eq(VoucherOrder::getVoucherId, voucherId)<br>            .eq(VoucherOrder::getUserId, userId)<br>            .count();<br>    ThrowUtils.throwIf(count &gt; <span class="hljs-number">0</span>, ErrorCode.OPERATION_ERROR, <span class="hljs-string">&quot;禁止重复下单&quot;</span>);<br><br>    <span class="hljs-comment">// 2. 扣减库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>)<br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>                .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>)<br>                .update();<br>    ThrowUtils.throwIf(!result, ErrorCode.OPERATION_ERROR, <span class="hljs-string">&quot;下单失败&quot;</span>);<br><br>    <span class="hljs-comment">// 3. 下单</span><br>    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>    voucherOrder.setUserId(userId);<br>    voucherOrder.setId(redisIdWorker.nextId(<span class="hljs-string">&quot;seckillVoucherOrder&quot;</span>));<br>    voucherOrder.setVoucherId(voucherId);<br>    result = <span class="hljs-built_in">this</span>.save(voucherOrder);<br>    ThrowUtils.throwIf(!result, ErrorCode.OPERATION_ERROR, <span class="hljs-string">&quot;下单失败&quot;</span>);<br>    <span class="hljs-keyword">return</span> CommonResult.success(voucherOrder.getId());<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><span id="集群环境下的并发问题">集群环境下的并发问题</span></h3><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307151540535.png" class title="image-20250307151540535"><h4><span id="分布式锁-原理"><strong>分布式锁-原理</strong></span></h4><p><strong>不去使用jvm内部的锁监视器，我们要在外部开一个锁监视器，让它监视所有的线程</strong></p><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307151802726.png" class title="image-20250307151802726"><p>常见的分布式锁</p><p><code>MySQL</code>：MySQL 本身带有锁机制，但是由于 MySQL 性能一般，所以采用分布式锁的情况下，使用 MySQL 作为分布式锁比较少见。<br><code>Redis</code>：Redis 作为分布式锁比较常见，利用 setnx 方法，如果 Key 插入成功，则表示获取到锁，插入失败则表示无法获取到锁。<br><code>Zookeeper</code>：Zookeeper 也是企业级开发中比较好的一个实现分布式锁的方案。</p><table><thead><tr><th></th><th>MySQL</th><th>Redis</th><th><strong>Zookeeper</strong></th></tr></thead><tbody><tr><td><strong>互斥</strong></td><td><strong>利用 MySQL 本身的互斥锁机制</strong></td><td><strong>利用 <code>setnx</code> 互斥命令</strong></td><td><strong>利用节点的唯一性和有序性</strong></td></tr><tr><td><strong>高可用</strong></td><td><strong>好</strong></td><td><strong>好</strong></td><td><strong>好</strong></td></tr><tr><td><strong>高性能</strong></td><td><strong>一般</strong></td><td><strong>好</strong></td><td><strong>一般</strong></td></tr><tr><td><strong>安全性</strong></td><td><strong>断开链接，自动释放锁</strong></td><td><strong>利用锁超时时间，到期释放</strong></td><td><strong>临时节点，断开链接自动释放</strong></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"># 添加锁（NX 互斥、EX 设置 TTL 时间）<br>SET lock thread1 NX EX <span class="hljs-number">10</span><br><br># 手动释放锁<br>DEL lock<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DistributedLock</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取锁（只有一个线程能够获取到锁）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout   锁的超时时间，过期后自动释放</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>          true 代表获取锁成功；false 代表获取锁失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleDistributedLock4Redis</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DistributedLock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleDistributedLockBased4Redis</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId().toString();<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(KEY_PREFIX + name, threadId, timeout, TimeUnit.SECONDS);<br>      <span class="hljs-comment">// result 是 Boolean 类型，直接返回存在自动拆箱，为防止空指针不直接返回</span><br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(result);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        stringRedisTemplate.delete(KEY_PREFIX + name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * VERSION3.0 - 秒杀下单优惠券（通过分布式锁解决一人一单问题）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> CommonResult&lt;Long&gt; <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 判断秒杀是否开始或结束、库存是否充足。</span><br>    ...<br><br>    <span class="hljs-comment">// 下单</span><br>    <span class="hljs-type">SimpleDistributedLock4Redis</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDistributedLock4Redis</span>(<span class="hljs-string">&quot;order:&quot;</span> + UserHolder.getUser().getId(), stringRedisTemplate);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">tryLock</span> <span class="hljs-operator">=</span> lock.tryLock(TTL_TWO);<br>    ThrowUtils.throwIf(!tryLock, ErrorCode.OPERATION_ERROR, <span class="hljs-string">&quot;禁止重复下单&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">VoucherOrderService</span> <span class="hljs-variable">voucherOrderService</span> <span class="hljs-operator">=</span> (VoucherOrderService) AopContext.currentProxy();<br>        <span class="hljs-keyword">return</span> voucherOrderService.createVoucherOrder(voucherId);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><span id="误删问题">误删问题</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"># 线程 <span class="hljs-number">1</span> 获取到锁后执行业务，碰到了业务阻塞。<br>setnx lock:order:<span class="hljs-number">1</span> thread01<br><br># 业务阻塞的时间超过了该锁的 TTL 时间，触发锁的超时释放。超时释放后，线程 <span class="hljs-number">2</span> 获取到锁并执行业务。<br>setnx lock:order:<span class="hljs-number">1</span> thread02<br><br># 线程 <span class="hljs-number">2</span> 执行业务的过程中，线程 <span class="hljs-number">1</span> 的业务执行完毕并且释放锁，但是释放的是线程 <span class="hljs-number">2</span> 获取到的锁。（线程 <span class="hljs-number">2</span>：你 TM 放我锁是吧！）<br>del lock:order:<span class="hljs-number">1</span><br><br># 线程 <span class="hljs-number">3</span> 获取到锁（此时线程 <span class="hljs-number">2</span> 和 <span class="hljs-number">3</span> 并行执行业务）<br>setnx lock:order:<span class="hljs-number">1</span> thread03<br><br></code></pre></td></tr></table></figure><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307152223236.png" class title="image-20250307152223236"><p><strong>解决方案</strong>：在线程释放锁时，判断当前这把锁是否属于自己，如果不属于自己，就不会进行锁的释放（删除）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"># 线程 <span class="hljs-number">1</span> 获取到锁后执行业务，碰到了业务阻塞。<br>setnx lock:order:<span class="hljs-number">1</span> thread01<br><br># 业务阻塞的时间超过了该锁的 TTL 时间，触发锁的超时释放。超时释放后，线程 <span class="hljs-number">2</span> 获取到锁并执行业务。<br>setnx lock:order:<span class="hljs-number">1</span> thread02<br><br># 线程 <span class="hljs-number">2</span> 执行业务的过程中，线程 <span class="hljs-number">1</span> 的业务执行完毕并且释放锁。但是线程 <span class="hljs-number">1</span> 需要判断这把锁是否属于自己，不属于自己就不会释放锁。<br># 于是线程 <span class="hljs-number">2</span> 一直持有这把锁直到业务执行结束后才会释放，并且在释放时也需要判断当前要释放的锁是否属于自己。<br>del lock:order:<span class="hljs-number">1</span><br><br># 线程 <span class="hljs-number">3</span> 获取到锁并执行业务<br>setnx lock:order:<span class="hljs-number">1</span> thread03<br></code></pre></td></tr></table></figure><img src="/posts/redis%E8%A7%A3%E5%86%B3%E5%B8%B8%E8%A7%81%E7%9A%84%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98/image-20250307152348573.png" class title="image-20250307152348573"><p>基于 Redis 的分布式锁的实现（解决误删问题）</p><ol><li><p>相较于最开始分布式锁的实现，只需要增加一个功能：释放锁时需要判断当前锁是否属于自己。（而集群环境下不同 JVM 中的线程 ID 可能相同，增加一个 UUID 区分不同 JVM）</p></li><li><p>因此通过分布式锁存入 Redis 中的线程标识包括：<strong>UUID (服务器id)+ 线程 ID(线程id)</strong>。UUID 用于区分不同服务器中线程 ID 相同的线程，线程 ID 用于区分相同服务器的不同线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleDistributedLockBasedOnRedis</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DistributedLock</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleDistributedLockBasedOnRedis</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br><br>  <span class="hljs-comment">// ID_PREFIX 在当前 JVM 中是不变的，主要用于区分不同 JVM</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSeconds)</span> &#123;<br>      <span class="hljs-comment">// UUID 用于区分不同服务器中线程 ID 相同的线程；线程 ID 用于区分同一个服务器中的线程。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadIdentifier</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">isSucceeded</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(KEY_PREFIX + name, threadIdentifier, timeoutSeconds, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(isSucceeded);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放锁（释放锁前通过判断 Redis 中的线程标识与当前线程的线程标识是否一致，解决误删问题）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// UUID 用于区分不同服务器中线程 ID 相同的线程；线程 ID 用于区分同一个服务器中的线程。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadIdentifier</span> <span class="hljs-operator">=</span> THREAD_PREFIX + Thread.currentThread().getId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadIdentifierFromRedis</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);<br>        <span class="hljs-comment">// 比较 Redis 中的线程标识与当前的线程标识是否一致</span><br>        <span class="hljs-keyword">if</span> (!StrUtil.equals(threadIdentifier, threadIdentifierFromRedis)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.OPERATION_ERROR, <span class="hljs-string">&quot;释放锁失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 释放锁标识</span><br>        stringRedisTemplate.delete(KEY_PREFIX + name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3><span id="用lua脚本解决原子性问题">用Lua脚本解决原子性问题</span></h3><p><strong>分布式锁的原子性问题</strong></p><ol><li><p>线程 1 获取到锁并执行完业务，判断锁标识一致后释放锁，<strong>释放锁的过程中阻塞，导致锁没有释放成功，并且阻塞的时间超过了锁的 TTL 释放，导致锁自动释放。</strong></p></li><li><p>此时线程 2 获取到锁，执行业务；在线程 2 执行业务的过程中，线程 1 完成释放锁操作。</p></li><li><p><strong>之后，线程 3 获取到锁，执行业务，又一次导致此时有两个线程同时在并行执行业务</strong>。</p></li></ol><p>因此，需要保证 <strong><code>unlock()</code> 方法的原子性</strong>，即判断线程标识的一致性和释放锁这两个操作的原子性。</p><p><strong>Redis 提供了 Lua 脚本功能，在一个脚本中编写多条 Redis 命令，确保 Redis 多条命令执行时的原子性。</strong></p><p>unlock操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;<br><br><span class="hljs-keyword">static</span>&#123;<span class="hljs-comment">//写成静态代码块，类加载就可以完成初始定义，就不用每次释放锁都去加载这个，性能提高咯</span><br>    UNLOCK_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>    UNLOCK_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>));<span class="hljs-comment">//设置脚本位置</span><br>    UNLOCK_SCRIPT.setResultType(Long.class);<br>&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//调用lua脚本</span><br>        stringRedisTemplate.execute(<br>                UNLOCK_SCRIPT,<br>                Collections.singletonList(KEY_PREFIX + name),<br>                ID_PREFIX + Thread.currentThread().getId()<br>        );<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>Lua脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 锁的key</span><br><span class="hljs-comment">-- local key = KEYS[1]</span><br><span class="hljs-comment">-- 当前线程标识</span><br><span class="hljs-comment">-- local threadId = ARGV[1]</span><br><span class="hljs-comment">-- 获取锁中的线程标识</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>,KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;del&#x27;</span>,KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1&gt;秒杀问题&lt;/h1&gt;</summary>
    
    
    
    <category term="redis的应用" scheme="https://garybyd.github.io/categories/redis%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="redis" scheme="https://garybyd.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis缓存的应用</title>
    <link href="https://garybyd.github.io/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://garybyd.github.io/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2025-03-06T08:34:51.000Z</published>
    <updated>2025-03-07T08:14:46.464Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="简单的缓存策略">简单的缓存策略</span></h2><span id="more"></span><img src="/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/image-20250306163757455.png" class title="image-20250306163757455"><!-- more--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShopService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">querygetById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//1.从Redis内查询商品缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>            <span class="hljs-comment">//手动反序列化</span><br>            <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, Shop.class);<br>            <span class="hljs-keyword">return</span> Result.ok(shop);<br>        &#125;<br>        <span class="hljs-comment">//2.不存在就根据id查询数据库</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-keyword">if</span>(shop==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;商户不存在！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//3.数据库数据写入Redis</span><br>        <span class="hljs-comment">//手动序列化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopStr</span> <span class="hljs-operator">=</span> JSONUtil.toJsonStr(shop);<br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id,shopStr,CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><span id="缓存更新策略">缓存更新策略</span></h2><img src="/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/image-20250306163925900.png" class title="image-20250306163925900"><p>缓存更新策略的最佳方案：</p><ol><li>低一致性需求：使用Redis自带的内存淘汰机制</li><li>高一致性需求：主动更新，超时剔除的方式作为斗地方案<ul><li>读操作<ul><li>缓存命中就直接返回</li><li>缓存未命中则查询数据库</li></ul></li><li>写操作：<ul><li>先写数据库，然后再删除缓存</li><li>要确保数据库与缓存操作的原子性</li></ul></li></ul></li></ol><p><code>操作缓存和数据库时需要考虑的三个问题</code></p><ol><li>删除缓存还是更新缓存？<ul><li><strong>每次更新数据库的同时更新缓存</strong>：若数据库更新了 100 次，期间没有任何查询请求，此时缓存的更新就是无效操作。</li><li><strong>数据库更新就删除缓存</strong>：数据库更新后缓存被删除，此时数据库无论更新多少次，缓存都不会做任何操作。直到有查询请求，缓存才会将数据库中的数据写入到缓存中。</li></ul></li><li>如何保证缓存和数据库的操作同时成功或失败？<ul><li>单体系统：将缓存与数据库操作放在一个事务。</li><li>分布式系统：利用 TCC 等分布式事务方案。</li></ul></li><li>先操作缓存还是先操作数据库？<ul><li><strong>先删除缓存，再操作数据库</strong>。假设缓存为 10，数据库为 10。（t1、t2、t3 代表三个时刻）<ul><li>t1：线程 1 删除缓存，并更新数据库为 20。t2：线程 2 查询缓存未命中，从数据库中查询并写入缓存。✔️</li><li>t1：线程 1 删除缓存。t2：线程 2 查询缓存未命中，从数据库中查询并写入缓存。t3：线程 t1 更新数据库为 20。❌</li></ul></li><li>**先操作数据库，再删除缓存。**假设缓存为 10，数据库为 10。（t1、t2、t3、t4 代表四个时刻）<ul><li>t1：线程 1 更新数据库为 20，删除缓存。t2：线程 2 查询缓存未命中，从数据库中查询并写入缓存。✔️</li><li>t1：线程 1 查询缓存未命中，从数据库中查询。t2：线程 2 更新数据库为 20，删除缓存。t3：线程 1 写入缓存。❌（这种方式出现的概率很小，缓存写入的速度很快。更可能出现的情况是：线程 1 写入缓存后，线程 2 更新数据库然后将缓存删除）</li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(Shop shop)</span> &#123;<br>    <span class="hljs-keyword">if</span>(shop.getId()==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺id不能为空!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//1.更新数据库</span><br>    updateById(shop);<br>    <span class="hljs-comment">//2.删除缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + shop.getId();<br>    stringRedisTemplate.delete(key);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h2><span id="缓存穿透问题">缓存穿透问题</span></h2><img src="/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/image-20250306164904456.png" class title="image-20250306164904456"><h3><span id="缓存空对象方案">缓存空对象方案</span></h3><p>客户端请求的数据在 Redis 和数据库中都不存在，为了防止不断的请求：将 空值 缓存到 Redis 中并且设置 TTL 时间后，返回给该请求。</p><ul><li><p>缓存中包含过多的 空值，会造成额外的内存消耗。（设置 TTL 可以缓解）</p></li><li><p>可能造成短期的不一致：第一次请求的数据在 Redis 和数据库中都不存在，缓存空对象后，数据库中新增了该请求对应的数据</p></li></ul><img src="/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/image-20250306164930772.png" class title="image-20250306164930772"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> CommonResult&lt;Shop&gt; <span class="hljs-title function_">getShopById</span><span class="hljs-params">(Long id)</span> &#123;<br>    ThrowUtils.throwIf(id == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopKey</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br><br>    <span class="hljs-comment">// 1. 先从 Redis 中查询数据，存在则将其转换为 Java 对象后返回</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJsonInRedis</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(shopKey);<br>    <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(shopJsonInRedis)) &#123;<br>        <span class="hljs-keyword">return</span> CommonResult.success(JSONUtil.toBean(shopJsonInRedis, Shop.class));<br>    &#125;<br>  <span class="hljs-comment">// 命中空值</span><br><span class="hljs-keyword">if</span> (shopJsonInRedis != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;该商铺不存在&quot;</span>);<br>&#125;<br><br>    <span class="hljs-comment">// 2. 从 Redis 中未查询到数据，则从数据库中查询</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(id);<br>    <br>    <span class="hljs-comment">// 若数据中也查询不到，则缓存空值后返回提示信息</span><br>    <span class="hljs-keyword">if</span> (shop == <span class="hljs-literal">null</span>) &#123;<br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="hljs-string">&quot;&quot;</span>, TTL_TWO, TimeUnit.MINUTES);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;该商铺不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 将从数据库中查询到的数据存入 Redis 后返回</span><br>    stringRedisTemplate.opsForValue().set(shopKey, JSONUtil.toJsonStr(shop), TTL_TWO, TimeUnit.HOURS);<br>    <span class="hljs-keyword">return</span> CommonResult.success(shop);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3><span id="布隆过滤器方案">布隆过滤器方案</span></h3><p><strong>布隆过滤器（Bloom Filter）</strong>：一个很长的二进制数组（初始化值为 0），通过一系列的 Hash 函数判断该数据是否存在。 布隆过滤器的运行速度快、内存占用小，但是存在误判的可能。</p><ol><li>存储数据时经过 n 个 hash 函数，计算出 n 个 hash 值，hash 值映射后得到 n 个索引，设置索引处的值为 1。（若当前索引处值已经为 1，则不需要任何操作）</li><li>查询数据时也会经过 n 个 hash 函数，计算出 n 个 hash 值，hash 值映射后得到 n 个索引，判断索引处的值是否为 1。<ul><li>查询 Anthony：经过 hash 算法得到的 hash 值映射后数组下标为 0、2、6，下标对应的值没有全为 1，数组中不存在该元素。</li><li>查询 Coco：经过 hash 算法得到的 hash 值映射后数组下标为 0、2、6，下标对应的值都为 1，数组中可能存在该元素。</li></ul></li></ol><img src="/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/image-20250306165707756.png" class title="image-20250306165707756"><h2><span id="缓存雪崩问题">缓存雪崩问题：</span></h2><img src="/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/image-20250306170151397.png" class title="image-20250306170151397"><p><strong>解决方案：</strong></p><ul><li><strong>给不同的Key的TTL添加随机值</strong></li><li><strong>利用Redis集群提高服务的可用性</strong></li><li><strong>给缓存业务添加降级限流策略</strong></li><li><strong>给业务添加多级缓存</strong></li></ul><h2><span id="缓存击穿问题">缓存击穿问题</span></h2><p><strong>缓存击穿问题，也叫 热点 Key 问题；就是一个被 高并发访问 并且 缓存中业务较复杂的 Key 突然失效，大量的请求在极短的时间内一起请求这个 Key 并且都未命中，无数的请求访问在瞬间打到数据库上，给数据库带来巨大的冲击。</strong></p><p><strong>缓存击穿整体过程：</strong></p><ol><li>一个线程查询缓存，未命中，查询数据库并重建缓存（缓存重建业务比较复杂，时间长）。</li><li>在这个重建缓存的过程中，大量的请求穿过缓存直接请求数据库并重建缓存，导致性能下降。</li></ol><p>解决方案：<strong>互斥锁(一致性)、逻辑过期(可用性)</strong></p><img src="/posts/redis%E7%BC%93%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8/image-20250306201047580.png" class title="image-20250306201047580"><h3><span id="互斥锁方案">互斥锁方案</span></h3><p>synchronized</p><ol><li>查询缓存，存在则直接返回。</li><li>不存在：执行 synchronized 代码块。<ol><li>先查缓存，存在则直接返回。（若多个线程执行到同步代码块，某个线程拿到锁查询数据库并重建缓存后，其他拿到锁进来的线程直接查询缓存后返回，避免重复查询数据库并重建缓存）</li><li>查询数据库，重建缓存。</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> CommonResult&lt;Shop&gt; <span class="hljs-title function_">getShopById</span><span class="hljs-params">(Long id)</span> &#123;<br>    ThrowUtils.throwIf(id == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopKey</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br><br>    <span class="hljs-comment">// 1. 先从 Redis 中查询数据，存在则将其转换为 Java 对象后返回</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJsonInRedis</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(shopKey);<br>    <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(shopJsonInRedis)) &#123;<br>        <span class="hljs-keyword">return</span> CommonResult.success(JSONUtil.toBean(shopJsonInRedis, Shop.class));<br>    &#125;<br>  <span class="hljs-comment">// 命中空值</span><br><span class="hljs-keyword">if</span> (shopJsonInRedis != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;该商铺不存在&quot;</span>);<br>&#125;<br><br>    <span class="hljs-comment">// 2. 从 Redis 中未查询到数据，则从数据库中查询。（synchronized）</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();<br>    <span class="hljs-keyword">synchronized</span> (ShopServiceImpl.class) &#123;<br>        <span class="hljs-comment">// 3. 再次查询 Redis：若多个线程执行到同步代码块，某个线程拿到锁查询数据库并重建缓存后，其他拿到锁进来的线程直接查询缓存后返回，避免重复查询数据库并重建缓存。</span><br>        shopJsonInRedis = stringRedisTemplate.opsForValue().get(shopKey);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(shopJsonInRedis)) &#123;<br>            <span class="hljs-keyword">return</span> CommonResult.success(JSONUtil.toBean(shopJsonInRedis, Shop.class));<br>        &#125;<br><br>        <span class="hljs-comment">// 4. 查询数据库，缓存空值避免缓存穿透，重建缓存。</span><br>        shop = <span class="hljs-built_in">this</span>.getById(id);<br>        <span class="hljs-keyword">if</span> (shop == <span class="hljs-literal">null</span>) &#123;<br>            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="hljs-string">&quot;&quot;</span>, TTL_TWO, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;该商铺不存在&quot;</span>);<br>        &#125;<br>      <span class="hljs-comment">// 模拟缓存重建延迟</span><br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        stringRedisTemplate.opsForValue().set(shopKey, JSONUtil.toJsonStr(shop), TTL_TWO, TimeUnit.HOURS);<br>    &#125;<br>    <span class="hljs-keyword">return</span> CommonResult.success(shop);<br>&#125;<br></code></pre></td></tr></table></figure><p>用redis的setnx来充当分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取互斥锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, TTL_TWO, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">return</span> Boolean.TRUE.equals(result);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 释放互斥锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span> &#123;<br>    stringRedisTemplate.delete(key);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> CommonResult&lt;Shop&gt; <span class="hljs-title function_">getShopById</span><span class="hljs-params">(Long id)</span> &#123;<br>    ThrowUtils.throwIf(id == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopKey</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br><br>    <span class="hljs-comment">// 1. 先从 Redis 中查询数据，存在则将其转换为 Java 对象后返回</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJsonInRedis</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(shopKey);<br>    <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(shopJsonInRedis)) &#123;<br>        <span class="hljs-keyword">return</span> CommonResult.success(JSONUtil.toBean(shopJsonInRedis, Shop.class));<br>    &#125;<br>  <span class="hljs-comment">// 命中空值</span><br><span class="hljs-keyword">if</span> (shopJsonInRedis != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;该商铺不存在&quot;</span>);<br>&#125;<br><br>    <span class="hljs-comment">// 2. 从 Redis 中未查询到数据，尝试获取锁后从数据库中查询。</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">tryLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 2.1 未获取到锁则等待一段时间后重试（通过递归调用重试）</span><br>        <span class="hljs-keyword">if</span> (BooleanUtil.isFalse(tryLock)) &#123;<br>            Thread.sleep(<span class="hljs-number">50</span>);<br>            <span class="hljs-built_in">this</span>.getShopById(id);<br>        &#125;<br><br>        <span class="hljs-comment">// 2.2 获取到锁：查询数据库、缓存重建。</span><br>        <span class="hljs-keyword">if</span> (tryLock) &#123;<br>            <span class="hljs-comment">// 3. 再次查询 Redis：若多个线程执行到获取锁处，某个线程拿到锁查询数据库并重建缓存后，其他拿到锁进来的线程直接查询缓存后返回，避免重复查询数据库并重建缓存。</span><br>            shopJsonInRedis = stringRedisTemplate.opsForValue().get(shopKey);<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(shopJsonInRedis)) &#123;<br>                <span class="hljs-keyword">return</span> CommonResult.success(JSONUtil.toBean(shopJsonInRedis, Shop.class));<br>            &#125;<br><br>            <span class="hljs-comment">// 4. 查询数据库，缓存空值避免缓存穿透，重建缓存。</span><br>            shop = <span class="hljs-built_in">this</span>.getById(id);<br>            <span class="hljs-keyword">if</span> (shop == <span class="hljs-literal">null</span>) &#123;<br>                stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="hljs-string">&quot;&quot;</span>, TTL_TWO, TimeUnit.MINUTES);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;该商铺不存在&quot;</span>);<br>            &#125;<br>          <span class="hljs-comment">// 模拟缓存重建延迟</span><br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            stringRedisTemplate.opsForValue().set(shopKey, JSONUtil.toJsonStr(shop), TTL_TWO, TimeUnit.HOURS);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 5. 释放锁</span><br>        unlock(lockKey);<br>    &#125;<br>    <span class="hljs-keyword">return</span> CommonResult.success(shop);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>逻辑过期方案</p><p>无需考虑缓存雪崩（Redis 宕机除外）、缓存穿透问题：缓存何时过期通过代码控制而非 TTL。需要进行数据预热，缓存未命中时直接返回空。</p><ol><li><p>先查询缓存，未命中则直接返回。</p></li><li><p>命中则判断缓存是否过期，未过期则直接返回。</p></li><li><p>过期：获取锁。</p><ol><li>未获取到锁：直接返回。</li><li>获取到锁：开启一个新的线程后直接返回，这个线程负责重建缓存后释放锁。</li></ol></li></ol><p>存储到 Redis 中的 Key 永久有效，过期时间通过代码控制而非 TTL。Redis 存储的数据需要带上一个逻辑过期时间，即 Shop 实体类中需要一个逻辑过期时间属性。新建一个 RedisData，该类包含两个属性 expireTime 和 Data，对原来的代码没有入侵性。</p><p><code>缓存预热（将热点数据提前存储到 Redis 中）</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisData</span> &#123;<br>    <span class="hljs-keyword">private</span> LocalDateTime expireTime;<br>    <span class="hljs-keyword">private</span> Object data;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 缓存预热（将热点数据提前存储到 Redis 中）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveHotDataIn2Redis</span><span class="hljs-params">(Long id, Long expireSeconds)</span> &#123;<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(id);<br>    ThrowUtils.throwIf(shop == <span class="hljs-literal">null</span>, ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;该数据不存在&quot;</span>);<br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>    redisData.setData(shop);<br>    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));<br>    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"># Redis 中存储的数据会多一个 expireTime 的值<br>&#123;<br>  <span class="hljs-string">&quot;expireTime&quot;</span>: <span class="hljs-number">1681660099861</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;101茶餐厅&quot;</span>,<br>    <span class="hljs-string">&quot;typeId&quot;</span>: <span class="hljs-number">1</span>,<br>    ...<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>逻辑过期</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 缓存预热（将热点数据提前存储到 Redis 中）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveHotDataIn2Redis</span><span class="hljs-params">(Long id, Long expireSeconds)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(id);<br>    ThrowUtils.throwIf(shop == <span class="hljs-literal">null</span>, ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;该数据不存在&quot;</span>);<br>    <span class="hljs-comment">// 模拟缓存重建延迟，让一部分线程先执行完毕，在此期间会短暂的不一致</span><br>    Thread.sleep(<span class="hljs-number">200</span>);<br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>    redisData.setData(shop);<br>    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));<br>    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">ES</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> CommonResult&lt;Shop&gt; <span class="hljs-title function_">getShopById</span><span class="hljs-params">(Long id)</span> &#123;<br>    ThrowUtils.throwIf(id == <span class="hljs-literal">null</span>, ErrorCode.PARAMS_ERROR);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopKey</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>    <span class="hljs-comment">// 1. 先从 Redis 中查询数据，未命中则直接返回</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">redisDataJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(shopKey);<br>    <span class="hljs-keyword">if</span> (StringUtils.isBlank(redisDataJson)) &#123;<br>        <span class="hljs-keyword">return</span> CommonResult.success(<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-comment">// 2. 判断是否过期，未过期则直接返回</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(redisDataJson, RedisData.class);<br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> (JSONObject) redisData.getData();<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(jsonObject, Shop.class);<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>    <span class="hljs-keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-keyword">return</span> CommonResult.success(shop);<br>    &#125;<br>    <span class="hljs-comment">// 3. 未获取到锁直接返回</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">tryLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>    <span class="hljs-keyword">if</span> (BooleanUtil.isFalse(tryLock)) &#123;<br>        <span class="hljs-keyword">return</span> CommonResult.success(shop);<br>    &#125;<br>    <span class="hljs-comment">// 4. 获取到锁：开启一个新的线程后返回旧数据。（这个线程负责查询数据库、重建缓存）</span><br>    <span class="hljs-comment">// 此处无需 DoubleCheck，因为未获取到锁直接返回旧数据，能保证只有一个线程执行到此处</span><br>    ES.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 查询数据库、重建缓存</span><br>            <span class="hljs-built_in">this</span>.saveHotDataIn2Redis(id, <span class="hljs-number">3600</span> * <span class="hljs-number">24L</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            unlock(lockKey);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> CommonResult.success(shop);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><span id="总结redis-cache工具类">总结Redis Cache工具类：</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheClient</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">ES</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheClient</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, TTL_TWO, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(result);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span> &#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据预热（将热点数据提前存储到 Redis 中）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key        预热数据的 Key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value      预热数据的 Value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 逻辑过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit   时间单位</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataWarmUp</span><span class="hljs-params">(String key, Object value, Long expireTime, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>        redisData.setData(value);<br>        redisData.setExpireTime(LocalDateTime.now().plusSeconds(timeUnit.toSeconds(expireTime)));<br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将 Java 对象序列化为 JSON 存储到 Redis 中并且设置 TTL 过期时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key      String 类型的键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value    序列化为 JSON 的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time     TTL 过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间单位</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;<br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, timeUnit);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解决缓存穿透问（缓存空值）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPrefix Key 前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id        id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type      实体类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> function  有参有返回值的函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time      TTL 过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit  时间单位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;R&gt;       实体类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;ID&gt;      id 类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 设置某个实体类的缓存，并解决缓存穿透问题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">setWithCachePenetration</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; function, Long time, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br><br>        <span class="hljs-comment">// 1. 先从 Redis 中查询数据，存在则将其转换为 Java 对象后返回</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(jsonStr)) &#123;<br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(jsonStr, type);<br>        &#125;<br>        <span class="hljs-comment">// 命中空值</span><br>        <span class="hljs-keyword">if</span> (jsonStr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 从 Redis 中未查询到数据，则从数据库中查询</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> function.apply(id);<br>        <span class="hljs-comment">// 若数据中也查询不到，则缓存空值后返回提示信息</span><br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>            stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, TTL_TWO, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">// 3. 将从数据库中查询到的数据存入 Redis 后返回</span><br>        <span class="hljs-built_in">this</span>.set(key, result, time, timeUnit);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解决缓存击穿问题（synchronized）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">setWithCacheBreakdown4Synchronized</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; function, Long time, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br><br>        <span class="hljs-comment">// 1. 先从 Redis 中查询数据，存在则将其转换为 Java 对象后返回</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(jsonStr)) &#123;<br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(jsonStr, type);<br>        &#125;<br>        <span class="hljs-comment">// 命中空值</span><br>        <span class="hljs-keyword">if</span> (jsonStr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 从 Redis 中未查询到数据，则从数据库中查询。（synchronized）</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">synchronized</span> (CacheClient.class) &#123;<br>            <span class="hljs-comment">// 3. 再次查询 Redis：若多个线程执行到同步代码块，某个线程拿到锁查询数据库并重建缓存后，其他拿到锁进来的线程直接查询缓存后返回，避免重复查询数据库并重建缓存。</span><br>            jsonStr = stringRedisTemplate.opsForValue().get(key);<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(jsonStr)) &#123;<br>                <span class="hljs-keyword">return</span> JSONUtil.toBean(jsonStr, type);<br>            &#125;<br><br>            <span class="hljs-comment">// 4. 查询数据库、缓存空值避免缓存穿透、重建缓存。</span><br>            result = function.apply(id);<br>            <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>                stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, TTL_TWO, TimeUnit.MINUTES);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);<br>            &#125;<br>            <span class="hljs-built_in">this</span>.set(key, result, time, timeUnit);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>  <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解决缓存击穿问题（setnx）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">setWithCacheBreakdown4SetNx</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; function, Long time, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br><br>        <span class="hljs-comment">// 1. 先从 Redis 中查询数据，存在则将其转换为 Java 对象后返回</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(jsonStr)) &#123;<br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(jsonStr, type);<br>        &#125;<br>        <span class="hljs-comment">// 命中空值</span><br>        <span class="hljs-keyword">if</span> (jsonStr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 从 Redis 中未查询到数据，尝试获取锁后从数据库中查询。</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">tryLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2.1 未获取到锁则等待一段时间后重试（通过递归调用重试）</span><br>            <span class="hljs-keyword">if</span> (BooleanUtil.isFalse(tryLock)) &#123;<br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                <span class="hljs-built_in">this</span>.setWithCacheBreakdown4SetNx(keyPrefix, id, type, function, time, timeUnit);<br>            &#125;<br>            <span class="hljs-comment">// 2.2 获取到锁：查询数据库、缓存重建。</span><br>            <span class="hljs-keyword">if</span> (tryLock) &#123;<br>                <span class="hljs-comment">// 3. 再次查询 Redis：若多个线程执行到同步代码块，某个线程拿到锁查询数据库并重建缓存后，其他拿到锁进来的线程直接查询缓存后返回，避免重复查询数据库并重建缓存。</span><br>                jsonStr = stringRedisTemplate.opsForValue().get(key);<br>                <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(jsonStr)) &#123;<br>                    <span class="hljs-keyword">return</span> JSONUtil.toBean(jsonStr, type);<br>                &#125;<br><br>                <span class="hljs-comment">// 4. 查询数据库、缓存空值避免缓存穿透、重建缓存。</span><br>                result = function.apply(id);<br>                <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>                    stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, TTL_TWO, TimeUnit.MINUTES);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.NOT_FOUND_ERROR);<br>                &#125;<br>                <span class="hljs-built_in">this</span>.set(key, result, time, timeUnit);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            unlock(lockKey);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解决缓存击穿问题（逻辑过期时间）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">setWithCacheBreakdown4LogicalExpiration</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; function, Long time, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br><br>        <span class="hljs-comment">// 1. 先从 Redis 中查询数据，未命中则直接返回</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(jsonStr)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 判断是否过期，未过期则直接返回</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(jsonStr, RedisData.class);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONUtil.parseObj(redisData.getData());<br>        <span class="hljs-type">R</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> JSONUtil.toBean(jsonObject, type);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>        <span class="hljs-keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">// 3. 未获取到锁直接返回</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">tryLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>        <span class="hljs-keyword">if</span> (BooleanUtil.isFalse(tryLock)) &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">// 4. 获取到锁：开启一个新的线程后返回旧数据。（这个线程负责查询数据库、重建缓存）</span><br>        <span class="hljs-comment">// 此处无需 DoubleCheck，因为未获取到锁直接返回旧数据，能保证只有一个线程执行到此处</span><br>        ES.submit(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.dataWarmUp(key, function.apply(id), time, timeUnit);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                unlock(lockKey);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2&gt;简单的缓存策略&lt;/h2&gt;</summary>
    
    
    
    <category term="redis教程" scheme="https://garybyd.github.io/categories/redis%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="redis" scheme="https://garybyd.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis基础结构</title>
    <link href="https://garybyd.github.io/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/"/>
    <id>https://garybyd.github.io/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/</id>
    <published>2025-03-04T00:39:12.000Z</published>
    <updated>2025-03-07T08:12:27.836Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="redis入门">Redis入门</span></h2><p><strong>（NoSQL, Not Only SQL） 非关系型数据库</strong></p><span id="more"></span><img src="/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/image-20250304085911096.png" class title="image-20250304085911096"><p><strong>关系型数据库</strong>：以 表格 的形式存在，以 行和列 的形式存取数据，一系列的行和列被称为表，无数张表组成了 数据库。支持复杂的 SQL 查询，能够体现出数据之间、表之间的关联关系；也支持事务，便于提交或者回滚。</p><p><strong>非关系型数据库</strong>：以 key-value 的形式存在，可以想象成电话本的形式，人名（key）对应电话号码（value）。不需要写一些复杂的 SQL 语句，不需要经过 SQL 的重重解析，性能很高；可扩展性也比较强，数据之间没有耦合性，需要新加字段就直接增加一个 key-value 键值对即可。</p><p><strong>Redis 是 速度极快的、基于内存的，键值型 NoSQL 数据库。</strong></p><h3><span id="为什么这么快"><strong>为什么这么快？</strong></span></h3><ul><li><p><strong>完全基于内存操作</strong>。</p></li><li><p><strong>使用非阻塞的 IO 多路复用机制</strong>。</p></li><li><p><strong>数据结构简单，对数据操作也简单。</strong></p></li><li><p><strong>使用单线程，避免了上下文切换和竞争产生的消耗。</strong></p></li><li><p>支持多种数据类型，包括 String、Hash、List、Set、ZSet 等。</p></li></ul><h3><span id="io-多路复用机制">IO 多路复用机制</span></h3><p>Redis 使用的是 <strong>IO 多路复用机制</strong> 来处理 <strong>高并发请求</strong>，这使得它能在 <strong>单线程</strong> 模式下仍然保持高吞吐量。</p><hr><p>🔹 <strong>Redis 为什么要用 IO 多路复用？</strong></p><ul><li><strong>Redis 是单线程的</strong>，但仍然能高效处理大量连接，这依赖于 IO 多路复用。</li><li>传统的 <strong>阻塞 IO</strong> 方式，每次只能处理一个连接，性能受限。</li><li>多路复用可以 <strong>同时监听多个客户端请求</strong>，只处理活跃连接，减少 CPU 空转。</li></ul><hr><p>🔹 <strong>Redis 的 IO 多路复用机制</strong></p><p>Redis 采用 <strong>epoll（Linux）或 select（Windows）</strong> 作为 IO 多路复用技术，主要使用 <strong><code>aeEventLoop</code> 事件处理机制</strong>：</p><ol><li><strong>主线程通过 <code>epoll/select/kqueue</code> 监听多个客户端连接</strong></li><li><strong>当某个连接有数据可读（如命令请求），Redis 触发相应的回调函数</strong></li><li><strong>回调函数读取请求，处理命令，返回结果</strong></li><li><strong>继续监听新的请求，不会阻塞在某个请求上</strong></li></ol><p>Redis 使用 <strong>事件驱动模型</strong>，主要有：</p><ul><li><strong>可读事件（AE_READABLE）</strong>：当客户端有数据可读时触发。</li><li><strong>可写事件（AE_WRITABLE）</strong>：当客户端可以写数据时触发。</li><li><strong>文件事件（File Event）</strong>：通过 <code>epoll</code> 监听 <strong>多个 socket 连接</strong>。</li><li><strong>时间事件（Time Event）</strong>：用于定时任务（比如 key 过期检测）。</li></ul><hr><p>🔹 <strong>Redis 多路复用示意图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[多个客户端]<br>   │<br>   ▼<br>[epoll/select 监听]<br>   │<br>   ├── 客户端 A 可读 -&gt; 触发回调 -&gt; 读取数据<br>   ├── 客户端 B 可写 -&gt; 触发回调 -&gt; 发送数据<br>   ├── 客户端 C 可读 -&gt; 触发回调 -&gt; 读取数据<br>   │<br>   ▼<br>[主线程执行 Redis 命令逻辑]<br></code></pre></td></tr></table></figure><h2><span id="redis的基础结构类型">Redis的基础结构类型</span></h2><h3><span id="key结构">Key结构</span></h3><p>让 Redis 的 key 形成层级结构，使用 <code>:</code> 隔开：<code>项目名:业务名:类型:id</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">set blog<span class="hljs-punctuation">:</span>user<span class="hljs-punctuation">:</span><span class="hljs-number">1</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Jack&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">22</span><span class="hljs-punctuation">&#125;</span>&#x27;<br>set blog<span class="hljs-punctuation">:</span>user<span class="hljs-punctuation">:</span><span class="hljs-number">2</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Mike&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">23</span><span class="hljs-punctuation">&#125;</span>&#x27;<br>set blog<span class="hljs-punctuation">:</span>article<span class="hljs-punctuation">:</span><span class="hljs-number">1</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Spring&quot;</span><span class="hljs-punctuation">&#125;</span>&#x27;<br></code></pre></td></tr></table></figure><h3><span id="string类型">String类型</span></h3><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>blog:user:1</td><td>‘{“id”:1, “name”:“Jack”, “age”:22}’</td></tr><tr><td>blog:user:2</td><td>‘{“id”:2, “name”:“Mike”, “age”:23}’</td></tr></tbody></table><p><strong>分配策略：</strong></p><p>Java 的 String 是不可变的，无法修改。Redis 的 String 是动态的，可以修改的。Redis 的 String 在内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。如图所示，当前字符串实际分配的空间为 capacity，一般高于实际的字符串长度 len。当字符串长度小于 1M 时，扩容是对现有空间的成倍增长；如果长度超过 1M 时，扩容一次只会多增加 1M 的空间。String 的最大长度为 512M。</p><img src="/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/image-20250304091313106.png" class title="image-20250304091313106"><h3><span id="hash结构">Hash结构</span></h3><img src="/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/image-20250304101409849.png" class title="image-20250304101409849"><h3><span id="list结构">list结构</span></h3><p><strong>List 类似 Java 中的 LinkedList，可以看作一个双向链表（有序可重复）</strong>。使用 List 可以对链表的两端进行 push 和 pop 操作、读取单个或多个元素、根据值查找或删除元素、支持正向检索和反向检索。</p><p><strong>栈</strong>：LPUSH + LPOP 或 RPUSH + RPOP。</p><p><strong>队列</strong>：LPUSH + RPOP 或 RPUSH + LPOP。</p><h3><span id="set结构">Set结构</span></h3><p><code>SADD key member [member ...]</code> ：向 Set 中添加一个或多个元素。</p><p><code>SMEMBERS key</code> ：获取指定 Set 中的所有元素。</p><p><code>SISMEMBER key member</code> ：判断 Set 中是否存在指定元素。</p><p><code>SCARD key </code>：返回 Set 中的元素个数。</p><p><code>SREM key member [member ...] </code> ：移除 Set 中的指定元素。</p><p><code>SINTER key [key ...]</code> ：求 n 个 key 间的交集。</p><p><code>SDIFF key [key ...]</code> ：求 n 个 key 间的差集。</p><p><code>SUNION key [key ...]</code> ：求 n 个 key 间的并集。</p><p><strong>Redis 的 Set 类似 HashSet，可以看作一个 value 为 null 的 HashMap；其特征也与 HashSet 类似：无序不可重复，支持 交集、并集、差集等功能。</strong></p><h3><span id="zset">ZSet</span></h3><p><strong>Redis 的 ZSet 是一个可排序的 Set 集合，类似 ZSet。ZSet 的每一个元素都带有一个 score 属性，可以基于 score 属性对元素排序。</strong></p><p><code>ZADD key [score member ...]</code> ：以 score 为权重向 ZSet 中添加一个或多个元素，如果存在则更新 score。</p><p><code>ZREM key member [member ...]</code> ：删除 ZSet 中的指定元素。</p><p><code>ZCARD key</code> ：返回 ZSet 中的元素个数。</p><p><code>ZSCORE key member </code>：获取 ZSet 中指定元素的 score 值。</p><p><code>ZADD key [score member ...]</code> ：以 score 为权重向 ZSet 中添加一个或多个元素，如果存在则更新 score。</p><p><code>ZREM key member [member ...] </code>：删除 ZSet 中的指定元素。</p><p><code>ZCARD key</code> ：返回 ZSet 中的元素个数。</p><p><code>ZSCORE key member</code> ：获取 ZSet 中指定元素的 score 值。</p><p><code>ZRANGEBYSCORE key min max</code> ：按照 score 排序后，获取 <strong>指定 score 范围</strong> 内的元素。</p><p><code>ZINTER numberKeys key [key ...] ｜ ZDIFF numberKeys key [key ...] ｜ ZUNION numberKeys key [key ...]</code> ：求 n 个 Zset 的交集、差集、并集。</p><h3><span id="redis-基础结构及其操作指令总结">Redis 基础结构及其操作指令总结</span></h3><table><thead><tr><th><strong>基础结构</strong></th><th><strong>描述</strong></th><th><strong>常用指令</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>String（字符串）</strong></td><td>最基本的数据结构，可以存储字符串、整数或浮点数</td><td><code>SET</code>、<code>GET</code>、<code>INCR</code>、<code>DECR</code>、<code>APPEND</code>、<code>MSET</code>、<code>MGET</code></td><td><code>SET key value</code>，<code>GET key</code></td></tr><tr><td><strong>List（列表）</strong></td><td>有序集合，允许重复元素，底层为双向链表</td><td><code>LPUSH</code>、<code>RPUSH</code>、<code>LPOP</code>、<code>RPOP</code>、<code>LRANGE</code></td><td><code>LPUSH mylist A B C</code>，<code>LRANGE mylist 0 -1</code></td></tr><tr><td><strong>Set（集合）</strong></td><td>无序集合，不允许重复元素</td><td><code>SADD</code>、<code>SREM</code>、<code>SMEMBERS</code>、<code>SISMEMBER</code></td><td><code>SADD myset A B C</code>，<code>SMEMBERS myset</code></td></tr><tr><td><strong>Hash（哈希）</strong></td><td>类似于对象，存储键值对</td><td><code>HSET</code>、<code>HGET</code>、<code>HGETALL</code>、<code>HDEL</code></td><td><code>HSET user name &quot;Alice&quot;</code>，<code>HGET user name</code></td></tr><tr><td><strong>ZSet（有序集合）</strong></td><td>具有权重（score）的集合，元素按分数排序</td><td><code>ZADD</code>、<code>ZRANGE</code>、<code>ZREM</code>、<code>ZSCORE</code></td><td><code>ZADD myzset 1 A 2 B</code>，<code>ZRANGE myzset 0 -1</code></td></tr><tr><td><strong>Bitmap（位图）</strong></td><td>位级别的存储，用于高效存储和操作二进制数据</td><td><code>SETBIT</code>、<code>GETBIT</code>、<code>BITCOUNT</code></td><td><code>SETBIT mybitmap 10 1</code>，<code>GETBIT mybitmap 10</code></td></tr><tr><td><strong>HyperLogLog</strong></td><td>近似去重计数结构，适用于大数据计数</td><td><code>PFADD</code>、<code>PFCOUNT</code></td><td><code>PFADD myhll A B C</code>，<code>PFCOUNT myhll</code></td></tr><tr><td><strong>Geo（地理位置）</strong></td><td>存储经纬度并计算地理距离</td><td><code>GEOADD</code>、<code>GEODIST</code>、<code>GEORADIUS</code></td><td><code>GEOADD mygeo 120.0 30.0 &quot;place1&quot;</code>，<code>GEODIST mygeo place1 place2</code></td></tr><tr><td><strong>Stream（流）</strong></td><td>可持久化的消息队列结构</td><td><code>XADD</code>、<code>XLEN</code>、<code>XREAD</code></td><td><code>XADD mystream * name &quot;Alice&quot;</code>，<code>XREAD COUNT 1 STREAMS mystream 0</code></td></tr></tbody></table><p>这些结构和指令在不同的应用场景中有不同的优势，比如 <strong>String</strong> 适用于缓存数据，<strong>List</strong> 适用于消息队列，<strong>Set</strong> 适用于去重，<strong>ZSet</strong> 适用于排行榜，<strong>Hash</strong> 适用于存储对象，<strong>Bitmap</strong> 适用于用户签到或活跃记录，<strong>HyperLogLog</strong> 适用于大规模数据去重统计，<strong>Geo</strong> 适用于地理位置存储，<strong>Stream</strong> 适用于事件流和消息队列。</p><h2><span id="java客户端连接redis">java客户端连接redis</span></h2><h3><span id="使用jedis">使用Jedis</span></h3><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.建立连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.200.130&quot;</span>,<span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//2.设置密码</span><br>        jedis.auth(<span class="hljs-string">&quot;1234&quot;</span>);<br>        <span class="hljs-comment">//3.选择库</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;小明&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result= &quot;</span> + result);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name= &quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(jedis!=<span class="hljs-literal">null</span>)&#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>3.jedis连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-comment">//配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        poolConfig.setMaxWait(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig,<span class="hljs-string">&quot;192.168.200.130&quot;</span>,<span class="hljs-number">6379</span>,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>1） JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</p><p>2）静态代码块：随着类的加载而加载，确保只能执行一次，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</p><p>3）最后提供返回连接池中连接的方法.</p><h3><span id="使用springdataredis连接">使用springDataRedis连接</span></h3><img src="/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/image-20250304102916188.png" class title="image-20250304102916188"><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Redis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.配置连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span> <span class="hljs-comment">#最大连接数</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span> <span class="hljs-comment">#最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#最小空闲连接</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">100</span> <span class="hljs-comment">#连接等待时间</span><br></code></pre></td></tr></table></figure><p>3.直接注入RedisTemplate出现的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动注入的 `RedisTemplate` 需要加上泛型</span><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>  redisTemplate.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>  Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>  map.put(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>  map.put(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>map.put(<span class="hljs-string">&quot;k4&quot;</span>, <span class="hljs-string">&quot;v4&quot;</span>);<br>  map.put(<span class="hljs-string">&quot;k5&quot;</span>, <span class="hljs-string">&quot;v5&quot;</span>);<br>  redisTemplate.opsForValue().multiSet(map);<br>redisTemplate.opsForValue().multiGet(Arrays.asList(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;k4&quot;</span>)).forEach(System.out::println);  <span class="hljs-comment">// v1 v2 v3 v4 v5</span><br>&#125;<br><br><span class="hljs-comment">//结果</span><br># 在 Redis 中查看通过 RedisTemplate 插入的数据<br>&gt; keys *<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k1&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k2&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k3&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k4&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k5&quot;</span><br><br>&gt; get <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k1&quot;</span><br><span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02v1&quot;</span><br></code></pre></td></tr></table></figure><p><strong>RedisTemplate 存在的问题</strong></p><p>通过以上操作可以发现：RedisTemplate 可以将任意类型的数据写入到 Redis 中，在写入前会将其序列化为字节形式存储，底层默认采用 <code>ObjectOutputStream</code> 序列化。</p><p>4.因此我们要重写他的序列化工具</p><p>导入 <code>jackson-databind</code> 依赖，并编写配置类 <strong>RedisTemplateConfig</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTemplateConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        <span class="hljs-comment">// 创建 RedisTemplate 对象</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-comment">// 设置序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br><br>        <span class="hljs-comment">// Key 和 HashKey 采用 String 序列化（StringRedisSerializer）</span><br>        redisTemplate.setKeySerializer(RedisSerializer.string());<br>        redisTemplate.setHashKeySerializer(RedisSerializer.string());<br>      <br>        <span class="hljs-comment">// Value 和 HashValue 采用 JSON 序列化（GenericJackson2JsonRedisSerializer）</span><br>        redisTemplate.setValueSerializer(jsonRedisSerializer);<br>        redisTemplate.setHashValueSerializer(jsonRedisSerializer);<br>        <br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动注入的 `RedisTemplate` 需要加上泛型</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>  redisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">21</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过以上的方法能够解决数据序列化时 <strong>可读性差、内存占用大</strong> 的问题。</p><p>但是 JSON 的序列化方式仍然存在一些问题：为了反序列化时知道对象的类型，<strong>JSON 序列化器会将类的 class 类型写入 JSON 结果，存入 Redis 中，会带来额外的内存开销。</strong></p><p>5.使用StringRedisTemplate</p><p>为了节省内存空间，Spring 提供了一个 <strong>StringRedisTemplate</strong>，它的 key 和 value 的序列化方式默认就是 String，统一使用 String 序列化器。</p><p>当需要存储 Java 对象时，手动完成对象的序列化和反序列化。</p><ol><li>使用 StringRedisTemplate。</li><li>写入数据到 Redis 中，手动将对象序列化为 JSON。</li><li>从 Redis 中读取数据，手动将读取到的 JSON 反序列化为对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ttt</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Michael&quot;</span>, <span class="hljs-number">27</span>);<br>    <span class="hljs-comment">// 手动序列化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(user);<br>    <span class="hljs-comment">// 写入数据</span><br>    stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:1&quot;</span>, json);<br>    <span class="hljs-comment">// 读取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:1&quot;</span>);<br>    <span class="hljs-comment">// 反序列化</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">deserializedUser</span> <span class="hljs-operator">=</span> objectMapper.readValue(data, User.class);<br>    System.out.println(deserializedUser);<br>&#125;<br><span class="hljs-comment">//结果</span><br>&#123;<br>  <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Michael&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">27</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2&gt;Redis入门&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;（NoSQL, Not Only SQL） 非关系型数据库&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="redis笔记" scheme="https://garybyd.github.io/categories/redis%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="redis" scheme="https://garybyd.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用指令大全</title>
    <link href="https://garybyd.github.io/posts/Hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://garybyd.github.io/posts/Hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2025-03-02T11:33:33.000Z</published>
    <updated>2025-03-07T08:15:07.684Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Hexo 常用命令速查表</strong></p><span id="more"></span><table><thead><tr><th>命令</th><th>功能</th><th>常用参数/示例</th></tr></thead><tbody><tr><td><strong>初始化</strong></td><td></td><td></td></tr><tr><td><code>npm install -g hexo-cli</code></td><td>全局安装Hexo命令行工具</td><td></td></tr><tr><td><code>hexo init &lt;folder&gt;</code></td><td>初始化博客项目</td><td><code>hexo init myblog</code></td></tr><tr><td><code>npm install</code></td><td>安装依赖包（在项目目录执行）</td><td></td></tr><tr><td><strong>内容管理</strong></td><td></td><td></td></tr><tr><td><code>hexo new &quot;标题&quot;</code></td><td>新建文章</td><td><code>hexo new &quot;Hello World&quot;</code></td></tr><tr><td><code>hexo new page &quot;名称&quot;</code></td><td>新建页面</td><td><code>hexo new page &quot;about&quot;</code></td></tr><tr><td><code>hexo publish &lt;filename&gt;</code></td><td>发布草稿</td><td><code>hexo publish draft/untitled.md</code></td></tr><tr><td><strong>生成与预览</strong></td><td></td><td></td></tr><tr><td><code>hexo generate</code></td><td>生成静态文件（简写<code>hexo g</code>）</td><td><code>hexo g --watch</code>（监听文件变化）</td></tr><tr><td><code>hexo server</code></td><td>启动本地服务器（简写<code>hexo s</code>）</td><td><code>hexo s -p 5000</code>（指定端口）</td></tr><tr><td><code>hexo clean</code></td><td>清除缓存和生成文件</td><td>常与生成命令组合使用</td></tr><tr><td><strong>部署</strong></td><td></td><td></td></tr><tr><td><code>npm install hexo-deployer-git --save</code></td><td>安装Git部署插件</td><td></td></tr><tr><td><code>hexo deploy</code></td><td>部署到服务器（简写<code>hexo d</code>）</td><td><code>hexo d --generate</code>（先生成后部署）</td></tr><tr><td><strong>组合命令</strong></td><td></td><td></td></tr><tr><td><code>hexo g -d</code></td><td>生成后立即部署</td><td>常用部署组合</td></tr><tr><td><code>hexo s -g</code></td><td>生成后启动服务器</td><td>开发调试常用</td></tr><tr><td><strong>高级操作</strong></td><td></td><td></td></tr><tr><td><code>hexo list &lt;type&gt;</code></td><td>列出所有文章/页面等</td><td><code>hexo list post</code></td></tr><tr><td><code>hexo version</code></td><td>查看Hexo版本</td><td></td></tr><tr><td><code>hexo --config custom.yml</code></td><td>使用自定义配置文件</td><td>多环境配置时使用</td></tr></tbody></table><p><strong>典型工作流示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建新文章</span><br>hexo new <span class="hljs-string">&quot;深入理解Hexo架构&quot;</span><br><br><span class="hljs-comment"># 2. 本地写作并预览</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br><br><span class="hljs-comment"># 3. 部署到GitHub</span><br>hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure><hr><p><strong>配置注意要点</strong></p><ol><li>部署配置（<code>_config.yml</code>）</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/用户名/仓库名.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><ol start="2"><li>主题配置示例</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">icarus</span>  <span class="hljs-comment"># 需先安装主题到themes目录</span><br></code></pre></td></tr></table></figure><hr><p><strong>常用插件推荐</strong></p><table><thead><tr><th>插件</th><th>功能</th><th>安装命令</th></tr></thead><tbody><tr><td><code>hexo-abbrlink</code></td><td>生成永久链接</td><td><code>npm install hexo-abbrlink --save</code></td></tr><tr><td><code>hexo-all-minifier</code></td><td>压缩静态资源</td><td><code>npm install hexo-all-minifier --save</code></td></tr><tr><td><code>hexo-generator-search</code></td><td>添加本地搜索</td><td><code>npm install hexo-generator-search --save</code></td></tr></tbody></table><p>掌握这些命令可提升博客管理效率，建议结合<code>--debug</code>参数排查问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g --debug  <span class="hljs-comment"># 显示详细生成日志</span><br></code></pre></td></tr></table></figure><p>icarus教程:<a href="https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/">https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Hexo 常用命令速查表&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo教程" scheme="https://garybyd.github.io/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://garybyd.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
